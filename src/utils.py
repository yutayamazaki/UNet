import os
import random
from typing import Dict, List, Tuple

import numpy as np
import torch
import torch.nn as nn


def load_labelmap(path: str) -> Dict[str, Tuple[int]]:
    """
    Args:
        path (str): A path to labelmap.txt generated by cvat.

    Returns:
        dict: A dictionary like {'class_name_1': (0, 128, 128), ...}.
    """
    color_maps: Dict[str, Tuple[int]] = {}
    with open(path, 'r') as f:
        for line in f:
            if line[0] == '#':  # comment out
                continue
            data_list: List[str] = line.split(':')
            label, cmap, _, _ = line.split(':')
            class_name: str = data_list[0]
            cmap: Tuple[int] = tuple([int(c) for c in data_list[1].split(',')])

            color_maps[class_name] = cmap

    return color_maps


def count_parameters(net: nn.Module, requires_grad: bool = True) -> int:
    """Count the number of parameters given torch model."""
    if requires_grad:
        return sum(p.numel() for p in net.parameters() if p.requires_grad)
    return sum(p.numel() for p in net.parameters())


def seed_everything(seed: int = 1234):
    """Set seed for every modules."""
    random.seed(seed)
    os.environ['PYTHONHASHSEED'] = str(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed(seed)
    torch.backends.cudnn.deterministic = True


if __name__ == '__main__':
    from unet import UNet, UNetResNet34
    color_maps: Dict[str, Tuple[int]] = load_labelmap(
        '../VOCDataset/labelmap.txt'
    )
    print(color_maps)

    simple_unet: nn.Module = UNet(in_channels=3, num_classes=5)
    resnet_unet: nn.Module = UNetResNet34(num_classes=5)

    num_params_unet: int = count_parameters(simple_unet)
    num_params_resunet: int = count_parameters(resnet_unet)

    print(f'Number of parameters in unet.UNet is: {num_params_unet}')
    print(
        f'Number of parameters in unet.UNetResNet34 is: {num_params_resunet}'
    )
